@page "/"
@using Blazor.Fluxor
@using fluxor_vs_redux_fluxor.Components
@using Store.Todo;
@using Store.User;
@inject IDispatcher Dispatcher
@inject IState<TodoState> TodoState;
@inject IState<UserState> UserState;

<h1>Redux Todo Blazor Edition</h1>

<p style="text-align: center;">ようこそ @(UserState.Value.Data?.Name ?? "ゲスト") さん</p>

<div class="form">
  <input placeholder="タスク" @bind="@newItem" />
  <button class=@(!string.IsNullOrWhiteSpace(newItem) ? "isActive" : "") @onclick="@AddAction" @onkeypress="@CheckKeys" type="button">追加</button>
</div>

@if (TodoState.Value.TodoItems.Count() < 1)
{
  <p>タスクがないよ</p>
}
else
{
  <ul class="todoList">
    @foreach (var item in TodoState.Value.TodoItems)
    {
      <TodoListItem ItemId=@item.Id TaskText=@item.TaskText IsDone=@item.IsDone HandleRemove=@RemoveAction HandleToggleDoneTask=@ToggleDoneTask />
    }
  </ul>
}

@code {
  private IList<TodoData> items = new List<TodoData>();
  private string newItem;

  private void AddAction()
  {
    Console.WriteLine("addAction");
    if (!string.IsNullOrWhiteSpace(newItem))
    {
      var action = new AddTodoAction(newItem);
      Dispatcher.Dispatch(action);
      newItem = string.Empty;
    }
  }

  private void RemoveAction(string Id)
  {
    Console.WriteLine("removeAction");
    var action = new RemoveTodoAction(Id);
    Dispatcher.Dispatch(action);
  }

  private void ToggleDoneTask(string Id)
  {
    Console.WriteLine("toggleAction");
    var action = new ToggleDoneTaskAction(Id);
    Dispatcher.Dispatch(action);
  }

  private void CheckKeys(UIKeyboardEventArgs args)
  {
    Console.WriteLine(args.Key);
    if (args.Key == "Enter")
      {
        this.AddAction();
      }
  }

  protected override void OnInit()
    {
      base.OnInit();
      Dispatcher.Dispatch(new FetchUserDataAction());
      TodoState.Subscribe(this);
      UserState.Subscribe(this);
    }
}